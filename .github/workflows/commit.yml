name: Galaxy Tool Linting and Tests for push and PR
on: [push, pull_request]
env:
  GALAXY_REPO: https://github.com/galaxyproject/galaxy
  GALAXY_RELEASE: release_20.05
jobs:
  setup:
    name: test a git repository containing a galaxy tool before commit or PR
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]
    steps:
    - name: Print github context properties
      run: |
        echo 'event: ${{ github.event_name }}'
        echo 'sha: ${{ github.sha }}'
        echo 'ref: ${{ github.ref }}'
        echo 'head_ref: ${{ github.head_ref }}'
        echo 'base_ref: ${{ github.base_ref }}'
        echo 'event.before: ${{ github.event.before }}'
        echo 'event.after: ${{ github.event.after }}'
    - uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/checkout@v2
      with:
    # Repository name with owner. For example, actions/checkout
    # Default: ${{ github.repository }}
        repository: 'galaxyproject/galaxy'
        path: '$GITHUB_WORKSPACE/galaxy'
    - name: make venv ready for this galaxy and planemo 
      run:  |
        python3 -m venv $GITHUB_WORKSPACE/galaxy/.venv
        . $GITHUB_WORKSPACE/galaxy/.venv/bin/activate
        pip install --upgrade pip
        pip install wheel
        pip install -r $GITHUB_WORKSPACE/galaxy/requirements.txt
        pip install galaxyxml
    - name: Upgrade pip
      run: pip install --upgrade pip
    # Install the `wheel` package so that when installing other packages which
    # are not available as wheels, pip will build a wheel for them, which can be cached.
    - name: Install wheel
      run: pip install wheel
    - name: Install Planemo and flake8
      run: pip install planemo galaxyxml flake8 flake8-import-order
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Planemo lint
      run: planemo lint .
    - name: Planemo test tool
      run: planemo test --test_output tool_test_output.html --conda_use_local --conda_dependency_resolution --galaxy_root $GITHUB_WORKSPACE/galaxy --test_output_json tool_test_output.json --galaxy_python_version ${{ matrix.python-version }}  .
    - name: Copy artifacts into place
      run: |
        mkdir upload
        mv tool_test_output.json tool_test_output.html upload/
    - uses: actions/upload-artifact@v2.0.1
      with:
        name: 'All tool test results'
        path: upload
