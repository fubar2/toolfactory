<tool id="rgTF2" name="toolfactory" version="2.00" profile="16.04" >
  <description>Scripts into tools</description>
  <macros>
     <xml name="planemo_steps">
         <param name="tool_version" label="Tool Version - bump this to warn users trying to redo old analyses" type="text" value="0.01"
            help="If you change your script and regenerate the 'same' tool, you should inform Galaxy (and users) by changing (bumping is traditional) this number"/>
            <param name="tool_desc" label="Tool Description" type="text" value=""
             help="Supply a brief tool description for the Galaxy tool menu entry (optional - appears after the tool name)" />
            <param name="help_text" label="Tool form documentation and help text for users" type="text" area="true"
            value="**What it Does**"
             help="Supply user documentation to appear on the new tool form as reStructured text - http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html" >
                <sanitizer>
                    <valid initial="string.printable">
                    </valid>
                    <mapping initial="none"/>
                </sanitizer>
            </param>
            <repeat name="citations" title="Citation">
                <conditional name="citation_type">
                    <param name="type" type="select" display="radio" label="Citation Type">
                        <option value="doi">DOI</option>
                        <option value="bibtex">BibTeX</option>
                    </param>
                    <when value="doi">
                        <param name="doi" label="DOI" type="text" value=""
                        help="Supply a DOI (e.g. doi: 10.1111/j.1740-9713.2007.00258.x) that should be cited when this tool is used in published research." />
                    </when>
                    <when value="bibtex">
                        <param name="bibtex" label="BibTex" type="text" area="true"
                            help="Supply a BibTex entry that should be cited when this tool is used in published research." value="" >
                            <sanitizer>
                                <valid initial="string.printable">
                                </valid>
                                <mapping initial="none"/>
                            </sanitizer>
                        </param>
                    </when>
                </conditional>
            </repeat>
     </xml>
     <xml name="io">
        <repeat name="history_inputs" title="Add a data file from your history to pass in to the script. Use the '+' button as needed"
             help="USE SMALL SAMPLES for the new tool's test. Prompts will form a history item selector as input for users of this new tool">
            <param name="input_files" type="data" format="data" label="Select an input file from your history" optional="true" multiple="false"
               help=""/>
            <param name="input_formats" type="select" multiple="true" label="Select the datatype(s) that your tool/script accepts as input"
              help="If your datatype is not listed here, it has to be added in galaxy's datatypes_conf.xml" value="tabular">
               <options from_parameter="tool.app.datatypes_registry.upload_file_formats">
                <column name="value" index="0"/>
               </options>
            </param>
            <param name="input_label" type="text" value="" label="This will become the user prompt for the form so please make it informative"
             help="Note that '~~~' is an internal delimiter so must not appear in this text field - please work around this technical limitation" >
            <sanitizer invalid_char="">
              <valid initial="string.printable"> <remove value='~~~'/> </valid>
              <mapping initial="none"/>
            </sanitizer>
            </param>
            <param name="input_help" type="text" value="parameter_help" label="This will become help text on the form."
             help="Note that three consecutive ~ cannot be used in this text field - please work around this technical limitation">
            <sanitizer invalid_char="">
              <valid initial="string.printable"> <remove value='~~~'/> </valid>
              <mapping initial="none"/>
            </sanitizer>
            </param>
            <param name="input_CL" type="text" label="Positional: ordinal integer. Argparse: argument name. STDIN if the executable/script expects it"
              help="If you will pass positional parameters, enter the integer ordinal for this parameter. If Argparse style, '--' will be prepended or '-' if single character" value="">
            </param>
        </repeat>
        <repeat name="history_outputs" title="Add a tool run output file to the user's history from your tool - Use the '+' button to add as many as needed"
             help="The name will become a history item for users of the new tool you are making containing one of it's outputs">
            <param name="history_name" type="text" label="Name for this output to appear in new history" optional="false" help=""/>
            <param name="history_format" type="select" multiple="false" label="Select the datatype for this output"
              help="If your datatype is not listed here, it has to be added in galaxy's datatypes_conf.xml" value="tabular">
               <options from_parameter="tool.app.datatypes_registry.upload_file_formats">
                <column name="value" index="0"/>
               </options>
            </param>
            <param name="history_CL" type="text"  label="Positional: ordinal integer. Argparse: argument name expected for this output parameter. Use STDOUT if '>' required."
              help="If positional parameters, enter the integer ordinal expected for this parameter. If Argparse style, '--' will be prepended or '-' if single character" value=""/>
            <param name="history_test" type="text"  label="Test pass decision criterion for this output compared to test generation"
              help="Available options are diff:lines, sim_size" value="diff:2"/>
        </repeat>
     </xml>
     <xml name="additparam">
        <param name="edit_params" type="select" display="radio" label="Add any additional parameters to the generated tool form so they are user editable?"
             help="If no (default), users will NOT be able to alter any additional parameters. If yes, these will appear on the tool form as text fields with no validation or sanitizing">
            <option value="yes">Yes, allow user to edit all additional parameters on the generated tool form</option>
            <option value="no" selected="true">No - use the fixed values for all additional parameters - no user editing</option>
        </param>

        <repeat name="additional_parameters" title="Pass additional parameters to the script"
             help="See examples below to see how these can be parsed by scripts in the various languages">
          <param name="param_name" type="text" value="parameter_name" label="Choose the name for this parameter">
            <sanitizer invalid_char="">
              <valid initial="string.letters,string.digits"/>
              <mapping initial="none"/>
            </sanitizer>
          </param>
          <param name="param_type" type="select" label="Select the type for this parameter">
            <option value="text" selected="true">text</option>
            <option value="integer">integer</option>
            <option value="float">float</option>
          </param>
          <param name="param_value" type="text" value="" label="Enter this parameter's default value"
            help="Note that '~~~' is an internal delimiter must not appear in this text field - please work around this technical limitation" >
            <sanitizer invalid_char="">
              <valid initial="string.printable"> <remove value='~~~'/> </valid>
              <mapping initial="none"/>
            </sanitizer>
          </param>
          <param name="param_label" type="text" value="parameter_label" label="Enter this parameter's label for the form"
             help="Note that '~~~' is an internal delimiter so must not appear in this text field - please work around this technical limitation" >
            <sanitizer invalid_char="">
              <valid initial="string.printable"> <remove value='~~~'/> </valid>
              <mapping initial="none"/>
            </sanitizer>
          </param>
          <param name="param_help" type="text" value="parameter_help" label="Help for this parameter"
             help="Note that three consecutive ~ cannot be used in this text field - please work around this technical limitation" >
            <sanitizer invalid_char="">
              <valid initial="string.printable"> <remove value='~~~'/> </valid>
              <mapping initial="none"/>
            </sanitizer>
          </param>
          <param name="param_CL" type="text" label="Positional ordinal | argparse argument name"
              help="Using positional parameters, enter the integer ordinal for this parameter on the command line. Using Argparse style, '--' will be prepended on the CL" value="" />
          <param name="param_CLprefixed" type="text" label="Override the generated default argparse name prefix if not empty - eg ----foo if needed"
              help="Some targets like Planemo expect an unadorned action like 'test' before --galaxy_root." value="" />
        </repeat>
     </xml>
  </macros>
  <requirements>
      <requirement type="package">python</requirement>
      <requirement type="package">perl</requirement>
      <requirement type="package">r-base</requirement>
      <requirement type="package">galaxyxml</requirement>
      <requirement type="package">planemo</requirement>
      <requirement type="package">yaml</requirement>
      <requirement type="package">lxml</requirement>
  </requirements>
  <command interpreter="python"><![CDATA[
#import os
#set dev_env = os.environ.get('GALAXY_DEVELOPMENT_ENVIRONMENT', '0') == '1'
#if not $dev_env and ( $__user_email__ not in $__admin_users__ ):
$__tool_directory__/rgToolFactory2.py --bad_user $__user_email__
 #else:
$__tool_directory__/rgToolFactory2.py
    #if len(str($cl_prefix)) > 3:
--cl_prefix "$cl_prefix"
    #end if
    #if $cover.commover == "yes":
       #if len(str($cover.command_override)) > 10:
--command_override "$commandoverride"
       #end if
       #if len(str($cover.test_override)) > 10:
--test_override "$testoverride"
       #end if
    #end if
    #if $interexe.dependency_model == "managed":
--packages "$interexe.packages"
    #else:
--sysexe "$interexe.sysexe"
    #end if
--tool_name="$tool_name"  --user_email="$__user_email__" --citations="$citeme"  --parampass="$ppass.parampass"
   #if $usescript.choosescript == "yes":
--script_path "$runme"
   #end if
   #if str($makeMode.make_Tool)!="runonly":
--make_Tool="$makeMode.make_Tool"
--tool_desc="$makeMode.tool_desc"
--tool_version="$makeMode.tool_version"
--help_text="$helpme"
--new_tool="$new_tool"
   #end if
   #if $ppass.parampass != '0':
     #if str($ppass.edit_params) == "yes":
--edit_additional_parameters
     #end if
     #for apar in $ppass.additional_parameters:
--additional_parameters="$apar.param_name~~~$apar.param_value~~~$apar.param_label~~~$apar.param_help~~~$apar.param_type~~~$apar.param_CL~~~$apar.param_CLprefixed"
     #end for
   #end if
     #for $intab in $ppass.history_inputs:
--input_files="$intab.input_files~~~$intab.input_CL~~~$intab.input_formats~~~$intab.input_label~~~$intab.input_help"
     #end for
     #for $otab in $ppass.history_outputs:
--output_files "$otab.history_name~~~$otab.history_format~~~$otab.history_CL~~~$otab.history_test"
     #end for
 #end if
]]></command>
 <configfiles>
  <configfile name="runme">
#if $usescript.choosescript == 'yes':
$usescript.dynScript
#end if
 </configfile>
 <configfile name="commandoverride">
#if $cover.commover == "yes" and len(str($cover.command_override).strip()) > 1:
$cover.command_override
#end if
 </configfile> 
 <configfile name="testoverride">
#if $cover.commover == "yes" and len(str($cover.test_override).strip()) > 1:
$cover.test_override
#end if
 </configfile> 
 <configfile name="helpme">
    #if $makeMode.make_Tool != "runonly":
${makeMode.help_text}
    #else
$tool_name help goes here
    #end if
 </configfile>
 <configfile name="citeme">
#if $makeMode.make_Tool != "runonly":
    #for $citation in $makeMode.citations:
        #if $citation.citation_type.type == "bibtex":
            **ENTRY**bibtex
            ${citation.citation_type.bibtex}
        #else
            **ENTRY**doi
            ${citation.citation_type.doi}
        #end if
    #end for
#end if
 </configfile>
  </configfiles>
  <inputs>
   <param name="tool_name" type="text" value="tool1"   label="New tool ID and title for outputs"
         help="Toolshed repository name. Choose thoughtfully to avoid namespace clashes with other tool writers. Lower case, digits and underscores only">
        <sanitizer invalid_char="">
            <valid initial="string.letters,string.digits">
                <add value="_"/>
            </valid>
        </sanitizer>
    </param>
  
    <conditional name="interexe">
        <param name="dependency_model" type="select" label="Dependency model: Conda managed external dependency or existing system executable"
        help = "If managed, the supplied package will become a requirement so must match the tool dependency resolver package name in conda.">
            <option value="managed" selected="true" >Use Conda managed dependencies</option>
            <option value="system" >Use a non-dependency managed system executable like bash or awk</option>
        </param>
        <when value="managed">
            <param name="packages" type="text" value="" label="Package name[:version, name:version...] for Conda. First will be called on generated command line" optional="false"
             help="Use colon to append specific versiion like 'bwa:0.17.0'. Default is latest if no version. Will be used every time the tool is (re)run." /> 
            <param name="sysexe" type="hidden" value="" />
        </when>
       <when value="system">
            <param name="sysexe" type="text" value="" label="System executable to run. Supplied/managed by the operating system - not Conda" optional="false"
            help=".e.g bash, awk or other standard and relatively invariant unix utilities"/>
            <param name="packages" type="hidden" value="" />
        </when>
    </conditional>
    <conditional name="usescript">
        <param name="choosescript" type="select" display="radio" label="Choose whether to run a supplied script - useful only if the dependency can use them"
        help = "Useful for script interpreters like Python or bash. All i/o and parameters must be passed. Choose No unless script is needed.">
            <option value="no" selected="true">No script required for the first dependency above - just parameters on the command line</option>
            <option value="yes">A script is ready to be pasted below.</option>
        </param> 
        <when value="no">
            <param name="dynScript" type="hidden"  value="" />
        </when>
        <when value="yes">
            <param name="dynScript" type="text" area="True" value="" label="Script for first dependency to interpret. "
             help="Script must handle all i/o and parameters as specified below using the parameter passing method chosen above">
              <sanitizer>
                 <valid initial="string.printable">
                 </valid>
                 <mapping initial="none"/>
              </sanitizer>
             </param>
        </when>
    </conditional>
    <conditional name="ppass">
        <param name="parampass"  type="select" display="radio" label="Command line parameter passing method to use">
            <option value="argparse" selected="true">Argparse style: passed in the form of --clname value</option>
            <option value="positional">Positional: Passed in the order of positional ordinals ...foo.bam bar.idx zot.xls</option>
            <option value="0">Tool reads selected input file from STDIN and writes STDOUT with new history output with no parameters</option>
        </param>
        <when value="argparse">
            <expand macro="io" />
            <expand macro="additparam" />
        </when>
        <when value="positional">
            <expand macro="io" />
            <expand macro="additparam" />
        </when>
        <when value="0">
             <expand macro="io"/>
        </when>
    </conditional>
    <param name="cl_prefix" type="text" value="" label="Prefix for generated command line. Prepends generated i/o and parameter CL. Use override below to replace completely"
            help="Text will replace generated executable/script elements. Sometimes required before i/o and parameters in the generated command line." />
    <conditional name="cover">
        <param name="commover" type="select" display="radio" label="Add Human wrought code to override the generated XML command and/or test section - DIY"
        help = "For arbitrary and artfull command lines. All i/o and parameters must be passed. Choose No unless needed. Not for the faint of heart">
            <option value="no" selected="true">Use automatically generated command/test XML </option>
            <option value="yes">DIY XML needed to replace autogenerated command and/or test segments will be pasted below</option>
        </param> 
        <when value="no">
            <param name="command_override" type="hidden"  value="" />
            <param name="test_override" type="hidden"  value="" />
        </when>
        <when value="yes">
            <param name="command_override" type="text" area="True" value="" label="Optional. Human wrought command element override XML/template - e.g. for bwa"
             help="For arbitrary and artfull command lines. All i/o and parameters must be passed. Leave blank unless needed. Not for the faint of heart">
              <sanitizer>
                 <valid initial="string.printable">
                 </valid>
                 <mapping initial="none"/>
              </sanitizer>
             </param>
            <param name="test_override" type="text" area="True" value="" label="Optional. Human wrought test element override XML/template - e.g. for bwa"
             help="For arbitrary and artfull scripts. Leave blank unless needed. Not for the faint of heart">
              <sanitizer>
                 <valid initial="string.printable">
                 </valid>
                 <mapping initial="none"/>
              </sanitizer>
            </param> 
        </when>
    </conditional>

    <conditional name="makeMode">
        <param name="make_Tool" type="select" display="radio" label="Choose the steps you want to run. Docker is recommended if you want local installation"
          help="Testing and installation in this Galaxy is optional. Planemo run must be used if you are providing XML overrides for the command or test sections" >
        <option value="runonly">Run this configuration. NOT suitable for Executable command/test overriden tools</option>
        <option value="generate" selected="true">Run and generate toolshed archive containing the new tool. NOT suitable for command/test overriden tools</option>
        <option value="geninstall">Run, generate, test and install (via the local toolshed) the new tool. NOT suitable for command/test overriden tools</option>
        <option value="planemogenerate">Planemo run and test. Suitable for tools with or without command/test overrides</option>
        <option value="planemogeninstall">Planemo run, test and install. Suitable for tools with or without command/test overrides</option>
        </param>
        <when value="runonly"/>
        <when value="generate">
            <expand macro="planemo_steps" />
        </when>
        <when value="geninstall">
            <expand macro="planemo_steps" />
        </when>
        <when value="planemogenerate">
            <expand macro="planemo_steps" />
        </when>
        <when value="planemogeninstall">
            <expand macro="planemo_steps" />
        </when>
    </conditional>

  </inputs>
  <outputs>

    <data format="tgz" name="new_tool" label="${tool_name}_toolshed.tgz" >
        <filter>makeMode['make_Tool'] != "runonly"</filter>
    </data>

  <collection name="TF_run_report" type="list" label="${tool_name} outputs">
      <discover_datasets pattern="__name_and_ext__" directory="TF_run_report_tempdir" />
  </collection>


  </outputs>
<tests>
<test>
    <param name="input_files" value="input1_sample" />
    <param name="input_CL" value="1" />
    <param name="input_formats" value="txt" />
    <param name="input_label" value="input" />
    <param name="input_help" value="help" />
    <param name="tool_name" value="pyrevpos" />
    <param name="parampass" value="positional" />
    <param name="make_Tool" value="generate" />
    <param name="tool_version" value="0.01" />
    <param name="tool_desc" value="positional reverse" />
    <param name="help_text" value="help text goes here" />
    <param name="interpreter" value="python"/>
    <param name="history_name" value="output2_sample" />
    <param name="history_format" value="txt" />
    <param name="history_CL" value="2" />
    <param name="dynScript" value="import sys; inp = sys.argv[1]; outp = sys.argv[2]; inlist = open(inp,'r').readlines(); o = open(outp,'w'); rs = [''.join(list(reversed(x.rstrip()))) for x in inlist]; o.write('\n'.join(rs)); o.close()"/>
    <output name="new_tool" file="toolfactory_pyrevpos_tgz_sample" compare="sim_size" delta="6000" />
    <!-- <output name="output" file="output2_sample" ftype="txt" compare="diff" lines_diff = "10" /> -->
</test>
</tests>
<help>

.. class:: warningmark

**Details and attribution**
(see GTF_)

**Local Admins ONLY**
Only users whose IDs found in the local admin_user configuration setting in universe_wsgi.ini can run this tool.

**If you find a bug**
Please raise an issue, or even better, submit a pull request fixing it, on the github repository GTF_

**What it does**
This tool optionally generates normal workflow compatible first class Galaxy tools

Generated tools can run existing binary packages that become requirements, existing scripts, or new scripts pasted into this tool form.
Pasted scripts are written so they are part of the new tool and cannot be adjusted by the downstream user.
Binary packages are managed by the dependency subsystem - conda usually, so anything in bioconda or conda_forge is available for example.

Any number of parameters can be built into the new tool form for passing in to the script or executable at runtime.
These can be editable by the downstream user or baked in.

When you run this tool, your executable or script and supplied parameter values will be run to produce a canonical
set of outputs - these are used to construct a test for the new tool.

If tool generation is required, a new tarball compatible with any Galaxy toolshed is created.
It can be unpacked in your galaxy/tools directory and manually added to tool_conf.xml, or
installed into any toolshed from where it can be installed into your Galaxy.


.. class:: warningmark

**Note to system administrators**
This tool offers *NO* built in protection against malicious scripts. It should only be installed on private/personnal Galaxy instances.
Admin_users will have the power to do anything they want as the Galaxy user if you install this tool.

.. class:: warningmark

**Use on public servers**  is STRONGLY discouraged for obvious reasons

The tools generated by this tool will run just as securely as any other normal installed Galaxy tool but like any other new tools, should always be checked carefully before installation.
We recommend that you follow the good code hygiene practices associated with safe toolshed practices.

Here's a sample python script that can be cut and pasted into the tool form, suitable for positional parameter passing:

::

    # reverse order of text by row
    import sys
    inp = sys.argv[1]
    outp = sys.argv[2]
    i = open(inp,'r').readlines()
    o = open(outp,'w')
    for row in i:
      rs = row.rstrip()
      rs = list(rs)
      rs.reverse()
      o.write(''.join(rs))
      o.write('\n')
    o.close()

With argparse style parameters:

::

    # reverse order of text by row
    import argparse
    parser = argparse.ArgumentParser()
    a = parser.add_argument
    a('--infile',default='')
    a('--outfile',default=None)
    args = parser.parse_args()
    inp = args.infile
    outp = args.outfile
    i = open(inp,'r').readlines()
    o = open(outp,'w')
    for row in i:
      rs = row.rstrip()
      rs = list(rs)
      rs.reverse()
      o.write(''.join(rs))
      o.write('\n')
    o.close()


Paper_ :

Creating re-usable tools from scripts: The Galaxy Tool Factory
Ross Lazarus; Antony Kaspi; Mark Ziemann; The Galaxy Team
Bioinformatics 2012; doi: 10.1093/bioinformatics/bts573

**Licensing**

Copyright Ross Lazarus (ross period lazarus at gmail period com) May 2012
All rights reserved.
Licensed under the LGPL_

.. _LGPL: http://www.gnu.org/copyleft/lesser.html
.. _GTF:  https://github.com/fubar2/toolfactory
.. _Paper: http://bioinformatics.oxfordjournals.org/cgi/reprint/bts573


</help>
<citations>
    <citation type="doi">10.1093/bioinformatics/bts573</citation>
</citations>
</tool>


