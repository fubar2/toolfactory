<tool id="rgtfd" name="toolfactory" version="2.00" profile="16.04" >
  <description>Scripts into tools v2.0</description>
  <macros>
     <xml name="tool_metadata">
         <param name="tool_version" label="Tool Version - bump this to warn users trying to redo old analyses" type="text" value="0.01"
            help="If you change your script and regenerate the 'same' tool, you should inform Galaxy (and users) by changing (bumping is traditional) this number"/>
            <param name="tool_desc" label="Tool Synopsis" type="text" value=""
             help="Supply a brief tool description for the Galaxy tool menu entry" />
            <param name="help_text" label="Tool form documentation and help text for users" type="text" area="true"
            value="**What it Does**"
             help="Supply user documentation to appear on the new tool form as reStructured text - http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html" >
                <sanitizer>
                    <valid initial="string.printable">
                    </valid>
                    <mapping initial="none"/>
                </sanitizer>
            </param>
            <repeat name="citations" title="Citation">
                <conditional name="citation_type">
                    <param name="type" type="select" display="radio" label="Citation Type">
                        <option value="doi">DOI</option>
                        <option value="bibtex">BibTeX</option>
                    </param>
                    <when value="doi">
                        <param name="doi" label="DOI" type="text" value=""
                        help="Supply a DOI (e.g. doi: 10.1111/j.1740-9713.2007.00258.x) to be cited when this tool is used in published research." />
                    </when>
                    <when value="bibtex">
                        <param name="bibtex" label="BibTex" type="text" area="true"
                            help="Supply a BibTex entry that should be cited when this tool is used in published research." value="" >
                            <sanitizer>
                                <valid initial="string.printable">
                                </valid>
                                <mapping initial="none"/>
                            </sanitizer>
                        </param>
                    </when>
                </conditional>
            </repeat>
     </xml>
     <xml name="io">
     <section name="io" title="Input and output files" expanded="true">
        <repeat name="history_inputs" title="zero or more input data files to pass as parameters to the executable."
             help="USE SMALL SAMPLES for the new tool's test. Prompts will form a history item selector as input for users of this new tool">
            <param name="input_files" type="data" format="data" label="Select an input file from your history" optional="true" multiple="false"
               help=""/>
            <param name="input_formats" type="select" multiple="true" label="Select the datatype(s) that your tool/script accepts as input"
              help="If your datatype is not listed here, it has to be added in galaxy's datatypes_conf.xml" value="tabular">
               <options from_parameter="tool.app.datatypes_registry.upload_file_formats">
                <column name="value" index="0"/>
               </options>
            </param>
            <param name="input_label" type="text" value="" label="This will become the user prompt for the form so please make it informative"
             help="Note that '~~~' is an internal delimiter so must not appear in this text field - please work around this technical limitation" >
            <sanitizer invalid_char="">
              <valid initial="string.printable"> <remove value='~~~'/> </valid>
              <mapping initial="none"/>
            </sanitizer>
            </param>
            <param name="input_help" type="text" value="" label="This will become help text on the form."
             help="Note that three consecutive ~ cannot be used in this text field - please work around this technical limitation">
            <sanitizer invalid_char="">
              <valid initial="string.printable"> <remove value='~~~'/> </valid>
              <mapping initial="none"/>
            </sanitizer>
            </param>
            <param name="input_CL" type="text" label="Positional: ordinal integer. Argparse: argument name. STDIN if the executable/script expects it"
              help="If you will pass positional parameters, enter the integer ordinal for this parameter. If Argparse style, '--' will be prepended or '-' if single character" value="">
            </param>
        </repeat>
        <repeat name="history_outputs" title="one or more new history items output by the executable to appear in the user history after the tool runs"
             help="The name will become a history item for users of the new tool you are making containing one of it's outputs">
            <param name="history_name" type="text" label="Name for this output to appear in new history" optional="false"
              help="No spaces! Argparse will also use this name as --[name]">
              <sanitizer invalid_char="_">
                <valid initial="string.letters,string.digits"/>
                <add value="_" />
              </sanitizer>
            </param>
            <param name="history_format" type="select" multiple="false" label="Select the datatype for this output"
              help="If your datatype is not listed here, it has to be added in galaxy's datatypes_conf.xml" value="tabular">
               <options from_parameter="tool.app.datatypes_registry.upload_file_formats">
                <column name="value" index="0"/>
               </options>
            </param>
            <param name="history_CL" type="text"  label="Positional: ordinal integer. Use STDOUT if '>' required. Otherwise ignored if argparse because name is used"
              help="If positional parameters, enter the integer ordinal expected for this parameter. If argparse, ignore unless STDOUT needed" value=""/>
            <param name="history_test" type="text"  label="Test pass decision criterion for this output compared to test generation"
              help="Available options are diff:[lines], sim_size:[delta (integer) or delta_frac (float)" value="diff:0"/>
        </repeat>
        </section>
     </xml>
     <xml name="additparam">
     <section name="addparam" title="Executable or script settings passed on the command line other than I/O files" expanded="true">
        <param name="edit_params" type="select" display="radio" label="Make these settings on the generated tool form user editable?"
             help="If no, users will NOT be able to alter any additional parameters. If yes, these will appear on the tool form as text fields with no validation or sanitizing">
            <option value="yes" selected="true">Yes, allow user to edit all additional parameters on the generated tool form</option>
            <option value="no">No - use the fixed values for all additional parameters - no user editing</option>
        </param>

        <repeat name="additional_parameters" title="zero or more settings to be set by the tool user and passed on the command line"
             help="See examples below to see how these can be parsed by scripts in the various languages">
          <param name="param_name" type="text" value="" label="Choose the name for this parameter - MUST not be blank!">
            <sanitizer invalid_char="">
              <valid initial="string.letters,string.digits"/>
              <mapping initial="none"/>
            </sanitizer>
          </param>
          <param name="param_type" type="select" label="Select the type for this parameter">
            <option value="text" selected="true">text</option>
            <option value="integer">integer</option>
            <option value="float">float</option>
          </param>
          <param name="param_value" type="text" value="" label="Enter this parameter's default value"
            help="Note that '~~~' is an internal delimiter must not appear in this text field - please work around this technical limitation" >
            <sanitizer invalid_char="">
              <valid initial="string.printable"> <remove value='~~~'/> </valid>
              <mapping initial="none"/>
            </sanitizer>
          </param>
          <param name="param_label" type="text" value="" label="Enter this parameter's label for the form"
             help="Note that '~~~' is an internal delimiter so must not appear in this text field - please work around this technical limitation" >
            <sanitizer invalid_char="">
              <valid initial="string.printable"> <remove value='~~~'/> </valid>
              <mapping initial="none"/>
            </sanitizer>
          </param>
          <param name="param_help" type="text" value="" label="Help for this parameter"
             help="Note that three consecutive ~ cannot be used in this text field - please work around this technical limitation" >
            <sanitizer invalid_char="">
              <valid initial="string.printable"> <remove value='~~~'/> </valid>
              <mapping initial="none"/>
            </sanitizer>
          </param>
          <param name="param_CL" type="text" label="Positional ordinal | argparse argument name"
              help="Using positional parameters, enter the integer ordinal for this parameter on the command line. Using Argparse style, '--' will be prepended on the CL" value="" />
          <param name="param_CLprefixed" type="text" label="Override the generated default argparse name prefix if not empty - eg ~~--foo if needed"
              help="Some targets like Planemo expect an unadorned action like 'test' before --galaxy_root." value="" />
        </repeat>
        </section>
     </xml>
  </macros>

<requirements>
   <requirement type="package" version="0.4.11">galaxyxml</requirement>
   <requirement type="package" version="0.14.0">bioblend</requirement>
   <requirement type="package" version="0.10.6">ephemeris</requirement>
   <requirement type="package" version="0.72.0">planemo</requirement>
</requirements>

  <command ><![CDATA[
#import os
#set dev_env = os.environ.get('GALAXY_DEVELOPMENT_ENVIRONMENT', '0') == '1'
#if not $dev_env and ( $__user_email__ not in $__admin_users__ ):
python3 $__tool_directory__/rgToolFactory2.py --bad_user $__user_email__
 #else:
python3 $__tool_directory__/rgToolFactory2.py
    #if len(str($cl_prefix)) > 3:
--cl_prefix "$cl_prefix"
    #end if
    #if $cover.commover == "yes":
       #if len(str($cover.command_override)) > 10:
--command_override "$commandoverride"
       #end if
       #if len(str($cover.test_override)) > 10:
--test_override "$testoverride"
       #end if
    #end if
--packages "$deps.packages"
   #if $deps.usescript.choosescript == "yes":
--script_path "$runme"
--sysexe "$deps.usescript.scriptrunner"
    #end if
--tool_name "$tool_name"  --user_email "$__user_email__" --citations "$citeme"  --parampass "$io_param.ppass.parampass"

   #if str($make.makeMode.make_Tool)!="runonly":
--make_Tool "$make.makeMode.make_Tool"
--tool_desc "$make.makeMode.tool_desc"
--tool_version "$make.makeMode.tool_version"
--help_text "$helpme"
--new_tool "$new_tool"
--toolshed_api_key "$make.makeMode.toolshed_apikey"
--galaxy_api_key "$make.makeMode.galaxy_apikey"
--toolshed_url "$make.makeMode.toolshed_url"
--galaxy_url "$make.makeMode.galaxy_url"
   #end if
   #if $io_param.ppass.parampass != '0':
     #if str($io_param.ppass.addparam.edit_params) == "yes":
--edit_additional_parameters
     #end if
     #for apar in $io_param.ppass.addparam.additional_parameters:
--additional_parameters "$apar.param_name~~~$apar.param_value~~~$apar.param_label~~~$apar.param_help~~~$apar.param_type~~~$apar.param_CL~~~$apar.param_CLprefixed"
     #end for
   #end if
     #for $intab in $io_param.ppass.io.history_inputs:
--input_files "$intab.input_files~~~$intab.input_CL~~~$intab.input_formats~~~$intab.input_label~~~$intab.input_help"
     #end for
     #for $otab in $io_param.ppass.io.history_outputs:
--output_files "$otab.history_name~~~$otab.history_format~~~$otab.history_CL~~~$otab.history_test"
     #end for
--galaxy_root "$__root_dir__"
--tool_dir "$__tool_directory__"
 #end if
]]></command>
 <configfiles>
  <configfile name="runme">
$deps.usescript.dynScript
 </configfile>
 <configfile name="commandoverride">
#if $cover.commover == "yes" and len(str($cover.command_override).strip()) > 1:
$cover.command_override
#end if
 </configfile>
 <configfile name="testoverride">
#if $cover.commover == "yes" and len(str($cover.test_override).strip()) > 1:
$cover.test_override
#end if
 </configfile>
 <configfile name="helpme">
    #if $make.makeMode.make_Tool != "runonly":
${make.makeMode.help_text}
    #else
$tool_name help goes here
    #end if
 </configfile>
 <configfile name="citeme">
#if $make.makeMode.make_Tool != "runonly":
    #for $citation in $make.makeMode.citations:
        #if $citation.citation_type.type == "bibtex":
            **ENTRY**bibtex
            ${citation.citation_type.bibtex}
        #else
            **ENTRY**doi
            ${citation.citation_type.doi}
        #end if
    #end for
#end if
 </configfile>
  </configfiles>
  <inputs>
   <param name="tool_name" type="text" value="tool1"   label="New tool ID and title for outputs"
         help="Toolshed repository name. Choose thoughtfully to avoid namespace clashes with other tool writers. Lower case, digits and underscores only">
        <sanitizer invalid_char="">
            <valid initial="string.ascii_lowercase,string.digits">
                <add value="_"/>
            </valid>
        </sanitizer>
    </param>

    <section name="deps" title="Dependencies, optional script and script interpreter" expanded="true">

    <param name="packages" type="text" value="" label="Conda dependencies as package name[:version, name:version...]. These will always be available when this tool executes"
    optional="false" help="Use =[ver] or :[ver] for specific version - 'bwa=0.17.0'. Default is latest. Will be used every time the tool is (re)run. Only Conda is currently supported"  />

    <conditional name="usescript">
        <param name="choosescript" type="select" display="radio" label="Supply a script for a dependency (e.g. python/R/bash) or a system executable such as Bash"
        help = "For script interpreters like Python or bash, parameters and i/o specified below must match script's expectations - if you pass parameters, the script must deal with them">
            <option value="no">No script required for this tool - just pass parameters on the command line to the first dependency listed above</option>
            <option value="yes" selected="true">Yes, a script is ready to be pasted below</option>
        </param>
        <when value="no">
            <param name="dynScript" type="hidden"  value="" />
            <param name="scriptrunner" type="hidden"  value="" />
        </when>
        <when value="yes">
            <param name="scriptrunner" type="text" value=""   label="Interpreter for the script - eg bash or python. Can be one of the dependencies named above or a system executable"
             help="Scripts are interpreted by the executable named here. Use bash for bash scripts, or a conda dependency such as R or Python for those scripts">
            <sanitizer invalid_char="">
                <valid initial="string.letters,string.digits">
                    <add value="_"/>
                </valid>
            </sanitizer>
            </param>
            <param name="dynScript" type="text" area="True" value="" label="Script for executable above to interpret. It can be one of the Conda dependency names "
             help="Script must handle all i/o and parameters as specified below using the parameters and passing method chosen below">
              <sanitizer>
                 <valid initial="string.printable">
                 </valid>
                 <mapping initial="none"/>
              </sanitizer>
             </param>
        </when>
    </conditional>
    </section>
    <section name="io_param" title="Data file input, output and settings forming the executable or script command line" expanded="true">
    <conditional name="ppass">
        <param name="parampass"  type="select" display="radio" label="Command line parameter passing method to use">
            <option value="argparse" selected="true">Argparse: passed in the form of --clname value</option>
            <option value="positional">Positional: Passed in the order of positional ordinals ...foo.bam bar.idx zot.xls</option>
            <option value="0">Tool reads selected input file from STDIN and writes STDOUT with no parameters</option>
        </param>
        <when value="argparse">
            <expand macro="io" />
            <expand macro="additparam" />
        </when>
        <when value="positional">
            <expand macro="io" />
            <expand macro="additparam" />
        </when>
        <when value="0">
             <expand macro="io"/>
        </when>
    </conditional>
    </section>
    <param name="cl_prefix" type="text" value="" label="Prefix for generated command line. Prepends generated i/o and parameter CL. Use override below to replace completely"
            help="Text will replace generated executable/script elements. Sometimes required before i/o and parameters in the generated command line." />
    <conditional name="cover">
        <param name="commover" type="select" display="radio" label="Add Human wrought code to override the generated XML command and/or test section - DIY"
        help = "For arbitrary and artfull command lines. All i/o and parameters must be passed. Choose No unless needed. Not for the faint of heart">
            <option value="no" selected="true">No. Use automatically generated command/test XML </option>
            <option value="yes">Yes. XML needed to override autogenerated command and/or test segments will be pasted below</option>
        </param>
        <when value="no">
            <param name="command_override" type="hidden"  value="" />
            <param name="test_override" type="hidden"  value="" />
        </when>
        <when value="yes">
            <param name="command_override" type="text" area="True" value="" label="Optional. Human wrought command element override XML/template - e.g. for bwa"
             help="For arbitrary and artfull command lines. All i/o and parameters must be passed. Leave blank unless needed. Not for the faint of heart">
              <sanitizer>
                 <valid initial="string.printable">
                 </valid>
                 <mapping initial="none"/>
              </sanitizer>
             </param>
            <param name="test_override" type="text" area="True" value="" label="Optional. Human wrought test element override XML/template - e.g. for bwa"
             help="For arbitrary and artfull scripts. Leave blank unless needed. Not for the faint of heart">
              <sanitizer>
                 <valid initial="string.printable">
                 </valid>
                 <mapping initial="none"/>
              </sanitizer>
            </param>
        </when>
    </conditional>
     <section name="make" title="Generate, toolshed and local Galaxy installation options" expanded="true">
    <conditional name="makeMode">
        <param name="make_Tool" type="select" display="radio" label="Choose the steps you want to run. The TF Docker container is recommended for local installation"
          help="Installation in this Galaxy is optional" >
        <option value="generate" >Run to generate tests only. Should fail if dependencies needed.</option>
        <option value="gentest" selected="true">Test with planemo after generating.</option>
        <option value="gentestinstall">Install in Galaxy after generation and testing. URLs and matching API keys are required for this step! </option>
        </param>
       <when value="generate">
           <param name="galaxy_apikey" value="" type="hidden"  ></param>
           <param name="toolshed_apikey" value="" type="hidden"  ></param>
           <param name="galaxy_url" value="" type="hidden"  ></param>
           <param name="toolshed_url" value="" type="hidden"  ></param>
            <expand macro="tool_metadata" />
        </when>
       <when value="gentest">
           <param name="galaxy_apikey" value="" type="hidden"  ></param>
           <param name="toolshed_apikey" value="" type="hidden"  ></param>
           <param name="galaxy_url" value="" type="hidden"  ></param>
           <param name="toolshed_url" value="" type="hidden"  ></param>
            <expand macro="tool_metadata" />
        </when>
       <when value="gentestinstall">
            <param name="galaxy_url" type="text" value="http://localhost:8080" label="URL for the Galaxy server where the new tool should be installed"
             help="Default is localhost">
              <sanitizer>
                 <valid initial="string.printable">
                 </valid>
                 <mapping initial="none"/>
              </sanitizer>
            </param>
          <param name="galaxy_apikey" type="text" value="fakekey" label="API key for the Galaxy to install the new tool"
             help="Cut and paste from the admin user properties screen">
              <sanitizer>
                 <valid initial="string.letters,string.digits">
                 </valid>
                 <mapping initial="none"/>
              </sanitizer>
            </param>
           <param name="toolshed_url" type="text" value="http://localhost:9009" label="URL for the Toolshed where the new tool should be installed"
             help="Default value is localhost:9009">
              <sanitizer>
                 <valid initial="string.printable">
                 </valid>
                 <mapping initial="none"/>
              </sanitizer>
            </param>
           <param name="toolshed_apikey" type="text" value="fakekey" label="API key for the local toolshed to use when installing the tool"
             help="Cut and paste from the admin user properties screen">
              <sanitizer>
                 <valid initial="string.letters,string.digits">
                 </valid>
                 <mapping initial="none"/>
              </sanitizer>
            </param>
            <expand macro="tool_metadata" />
        </when>
    </conditional>
    </section>
  </inputs>
  <outputs>

    <data format="tgz" name="new_tool" label="${tool_name}_toolshed.tgz" >
        <filter>makeMode['make_Tool'] != "runonly"</filter>
    </data>

  <collection name="TF_run_report" type="list" label="${tool_name} outputs">
      <discover_datasets pattern="__name_and_ext__" directory="TF_run_report_tempdir" />
  </collection>
  </outputs>
<tests>
<test>
    <param name="user_email" value="admin@galaxy.org"/>
    <param name="input_files" value="input1_sample" />
    <param name="input_CL" value="1" />
    <param name="input_formats" value="txt" />
    <param name="input_label" value="input" />
    <param name="input_help" value="help" />
    <param name="tool_name" value="pyrevpos" />
    <param name="parampass" value="positional" />
    <param name="make_Tool" value="generate" />
    <param name="tool_version" value="0.01" />
    <param name="tool_desc" value="positional reverse" />
    <param name="help_text" value="help text goes here" />
    <param name="packages" value="python"/>
    <param name="history_name" value="output2" />
    <param name="history_format" value="txt" />
    <param name="history_CL" value="2" />
    <param name="dynScript" value="import sys; inp = sys.argv[1]; outp = sys.argv[2]; inlist = open(inp,'r').readlines(); o = open(outp,'w'); rs = [''.join(list(reversed(x.rstrip()))) for x in inlist]; o.write('\n'.join(rs)); o.close()"/>
    <param name="choosescript" value="yes" />
    <param name="script_path" value="$runme"/>
    <output name="new_tool" file="toolfactory_pyrevpos_tgz_sample" compare="sim_size" delta="6000" />
</test>
</tests>
<help>

.. class:: warningmark

**Details and attribution**
(see GTF_)

**Local Admins ONLY**
Only users whose IDs found in the local admin_user configuration setting in universe_wsgi.ini can run this tool.

**If you find a bug**
Please raise an issue, or even better, submit a pull request fixing it, on the github repository GTF_

**What it does**
This tool optionally generates normal workflow compatible first class Galaxy tools

Generated tools can run existing binary packages that become requirements, existing scripts, or new scripts pasted into this tool form.
Pasted scripts are written so they are part of the new tool and cannot be adjusted by the downstream user.
Binary packages are managed by the dependency subsystem - conda usually, so anything in bioconda or conda_forge is available for example.

Any number of parameters can be built into the new tool form for passing in to the script or executable at runtime.
These can be editable by the downstream user or baked in.

When you run this tool, your executable or script and supplied parameter values will be run to produce a canonical
set of outputs - these are used to construct a test for the new tool.

If tool generation is required, a new tarball compatible with any Galaxy toolshed is created.
It can be unpacked in your galaxy/tools directory and manually added to tool_conf.xml, or
installed into any toolshed from where it can be installed into your Galaxy.


.. class:: warningmark

**Note to system administrators**
This tool offers *NO* built in protection against malicious scripts. It should only be installed on private/personnal Galaxy instances.
Admin_users will have the power to do anything they want as the Galaxy user if you install this tool.

.. class:: warningmark

**Use on public servers**  is STRONGLY discouraged for obvious reasons

The tools generated by this tool will run just as securely as any other normal installed Galaxy tool but like any other new tools, should always be checked carefully before installation.
We recommend that you follow the good code hygiene practices associated with safe toolshed practices.

Here's a sample python script that can be cut and pasted into the tool form, suitable for positional parameter passing:

::

    # reverse order of text by row
    import sys
    inp = sys.argv[1]
    outp = sys.argv[2]
    i = open(inp,'r').readlines()
    o = open(outp,'w')
    for row in i:
      rs = row.rstrip()
      rs = list(rs)
      rs.reverse()
      o.write(''.join(rs))
      o.write('\n')
    o.close()

With argparse style parameters:

::

    # reverse order of text by row
    import argparse
    parser = argparse.ArgumentParser()
    a = parser.add_argument
    a('--infile',default='')
    a('--outfile',default=None)
    args = parser.parse_args()
    inp = args.infile
    outp = args.outfile
    i = open(inp,'r').readlines()
    o = open(outp,'w')
    for row in i:
      rs = row.rstrip()
      rs = list(rs)
      rs.reverse()
      o.write(''.join(rs))
      o.write('\n')
    o.close()



Paper_

*Licensing*

Copyright Ross Lazarus (ross period lazarus at gmail period com) May 2012
All rights reserved.
Licensed under the LGPL_

.. _LGPL: http://www.gnu.org/copyleft/lesser.html
.. _GTF:  https://github.com/fubar2/toolfactory
.. _Paper: http://bioinformatics.oxfordjournals.org/cgi/reprint/bts573


</help>
<citations>
    <citation type="doi">10.1093/bioinformatics/bts573</citation>
</citations>
</tool>


